#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <100>;
    delay-ms = <0>;
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <13 14 15 16 17 18>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <1 2 3 4 5 6>;
            hold-trigger-on-release;
        };
    };

    macros {
        toggle_gaming_layer: toggle_gaming_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 1 &rgb_ug RGB_TOG>;
            label = "TOGGLE_GAMING_LAYER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp GRAVE         &kp N1           &kp N2           &kp N3             &kp N4               &kp N5       &kp UP_ARROW     &kp N6     &kp N7                &kp N8              &kp N9            &kp N0                    &kp BACKSPACE
&kp TAB           &kp Q            &kp W            &kp E              &kp R                &kp T        &kp DOWN_ARROW   &kp Y      &kp U                 &kp I               &kp O             &kp P                     &kp BSLH
&kp ESCAPE        &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LEFT_CONTROL F  &kp G        &kp LEFT_ARROW   &kp H      &hmr RIGHT_CONTROL J  &hmr RIGHT_SHIFT K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON  &kp APOS
&kp LEFT_CONTROL  &kp Z            &kp X            &kp C              &kp V                &kp B        &kp RIGHT_ARROW  &kp N      &kp M                 &kp COMMA           &kp DOT           &kp FSLH                  &kp ENTER
&kp C_MUTE        &kp LCTRL        &kp LEFT_GUI     &kp LEFT_ALT       &mo 2                &kp SPACE    &kp ENTER        &kp SPACE  &kp ENTER             &mo 3               &kp RIGHT_SHIFT   &kp DELETE
            >;

            display-name = "base";
        };

        gaming {
            bindings = <
&kp ESC    &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans    &trans
&kp TAB    &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans    &trans
&kp LSHFT  &kp A   &kp S   &kp D   &kp F   &kp G     &trans  &kp H   &kp J   &kp K   &kp L   &kp SEMI  &trans
&kp LCTRL  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans    &trans
&trans     &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        sym_nav {
            bindings = <
&kp GRAVE   &kp F1  &kp F2  &kp F3                &kp F4                 &kp F5               &mmv MOVE_UP     &kp F6    &kp F7    &kp F8  &kp F9     &kp F10    &trans
&trans      &trans  &trans  &kp LBKT              &kp RBKT               &kp DOUBLE_QUOTES    &mmv MOVE_DOWN   &trans    &trans    &trans  &trans     &kp MINUS  &kp EQUAL
&trans      &trans  &trans  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp APOS             &mmv MOVE_LEFT   &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans     &trans
&trans      &trans  &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE            &mmv MOVE_RIGHT  &trans    &trans    &trans  &trans     &trans     &trans
&kp C_MUTE  &trans  &trans  &trans                &trans                 &trans               &mkp LCLK        &trans    &trans    &trans  &trans     &trans
            >;

            display-name = "sym_nav";
        };

        special {
            bindings = <
&sys_reset  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &mmv MOVE_UP     &kp F6            &kp F7        &kp F8        &kp F9      &kp F10  &sys_reset
&trans      &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans                  &mmv MOVE_DOWN   &trans            &trans        &kp F11       &kp F12     &trans   &trans
&trans      &out OUT_USB  &out OUT_BLE    &trans        &trans        &toggle_gaming_layer    &mmv MOVE_LEFT   &kp C_PREVIOUS    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  &trans   &rgb_ug RGB_COLOR_HSB(290,100,70)
&trans      &trans        &trans          &trans        &trans        &trans                  &mmv MOVE_RIGHT  &kp C_PLAY_PAUSE  &trans        &trans        &trans      &trans   &rgb_ug RGB_TOG
&trans      &trans        &trans          &trans        &trans        &trans                  &mkp LCLK        &trans            &trans        &trans        &trans      &trans
            >;

            display-name = "layer2";
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
